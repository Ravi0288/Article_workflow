# Generated by Django 4.2 on 2024-04-12 14:38

import configurations.common
from django.db import migrations, models
import django.db.models.deletion
import step1.archive_article


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Email_notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_from', models.TextField(help_text='Enter email address of the sender')),
                ('email_to', models.TextField(help_text="Enter list of email addresses of the receivers in this format ['email-1','email-2]")),
                ('email_subject', models.TextField(default='Error Occured', help_text='Email default subject')),
                ('email_body', models.TextField(blank=True, help_text='Email body. This will be the error message from the exceptions handlers', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Providers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('official_name', models.CharField(max_length=64)),
                ('working_name', models.CharField(max_length=64)),
                ('in_production', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Provider_meta_data_FTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server', models.TextField(help_text='Enter FTP address')),
                ('protocol', models.CharField(help_text='Enter Protocol used by this FTP. i.e. FTP / SFTP', max_length=10)),
                ('site_path', models.TextField(default='/', help_text='Enter default location where file is stored on FTP server')),
                ('is_password_required', models.BooleanField(default=True, help_text='Is this FTP password protected?')),
                ('account', models.CharField(blank=True, help_text='Username to login to FTP. if is_password_required is selected this field is required', max_length=100, null=True)),
                ('password', configurations.common.EncryptedField(blank=True, help_text='Password to login to FTP. if is_password_required is selected this field is required', null=True)),
                ('minimum_delivery_fq', models.IntegerField(help_text='Enter frequency (number of days) when to sync the data with FTP')),
                ('next_due_date', models.DateTimeField(help_text="This will be filled automatically base on minimum_delivery_frequency. Don't enter anything here", null=True)),
                ('last_pull_time', models.DateTimeField(auto_now=True, help_text='This will be auto field as and when the FTP will be accessed')),
                ('last_pull_status', models.CharField(default='success', help_text="For the first time enter 'Initial'. This field will maintain last sync status success or failed", max_length=10)),
                ('last_error_message', models.TextField(blank=True, help_text="In case of error last error message will be stored here. Don't enter anything here", null=True)),
                ('provider', models.ForeignKey(help_text='Select Provider name', on_delete=django.db.models.deletion.CASCADE, related_name='ftp_provider', to='step1.providers')),
            ],
        ),
        migrations.CreateModel(
            name='Provider_meta_data_API',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_meta_type', models.CharField(blank=True, choices=[('Chorus', 'Chorus'), ('CrossRef', 'CrossRef'), ('Submission', 'Submission')], help_text='Select Type of API', max_length=20, null=True)),
                ('base_url', models.URLField(help_text='Enter Base URL of the API')),
                ('identifier_type', models.CharField(help_text="Enter Identifier type / name. For example 'usda funder id' ", max_length=50)),
                ('identifier_code', models.CharField(help_text='Enter Identifier code for example 100000199', max_length=50)),
                ('is_token_required', models.BooleanField(default=False, help_text='If this API endpoint is password protected select the check box')),
                ('site_token', configurations.common.EncryptedField(blank=True, help_text="If 'is_token_required' is selected provide password / token for API", null=True)),
                ('minimum_delivery_fq', models.IntegerField(help_text='Enter frequency (number of days) when to sync the data with API')),
                ('next_due_date', models.DateTimeField(help_text="This will be filled automatically base on minimum_delivery_frequency. Don't enter anything here", null=True)),
                ('last_pull_time', models.DateTimeField(auto_now=True, help_text='This will be auto field as and when the api will be accessed')),
                ('last_pull_status', models.CharField(default='success', help_text="For the first time enter 'Initial'. This field will maintain last sync status success or failed", max_length=10)),
                ('last_error_message', models.TextField(blank=True, help_text="In case of error last error message will be stored here. Don't enter anything here", null=True)),
                ('proxy_host_url', models.TextField(blank=True, help_text='Provide proxy hosts if any. This is optional', null=True)),
                ('external_library_url', models.TextField(blank=True, help_text='Provide external library address if any. This is optional', null=True)),
                ('is_paginated', models.BooleanField(default=False, help_text='Is this api paginated? Select if yes. This is optional')),
                ('page_number', models.IntegerField(default=1, help_text='If paginated, enter the first page number. Default is 1', null=True)),
                ('email_notification', models.ForeignKey(blank=True, help_text='In case email notifications are required to be sent to inform status select the email group. This is optional', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='step1.email_notification')),
                ('provider', models.ForeignKey(help_text='Select Provider name', on_delete=django.db.models.deletion.CASCADE, related_name='api_provider', to='step1.providers')),
            ],
        ),
        migrations.CreateModel(
            name='Fetch_history',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='success', max_length=10)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='fetch_history', to='step1.providers')),
            ],
        ),
        migrations.CreateModel(
            name='Email_history',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='success', max_length=10)),
                ('email_subject', models.TextField(default='Error Occured')),
                ('email_body', models.TextField(default='Error Occured')),
                ('email_ref', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='email_notification', to='step1.email_notification')),
            ],
        ),
        migrations.CreateModel(
            name='Archived_article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_content', models.FileField(blank=True, help_text='Browse the file', null=True, storage=step1.archive_article.OverWriteStorage(), upload_to=step1.archive_article.get_file_path)),
                ('file_name_on_source', models.CharField(help_text='File name will be stored automatically', max_length=500)),
                ('file_size', models.IntegerField(default=0, help_text='File size will be stored automatically')),
                ('file_type', models.CharField(help_text='File type will be stored automatically', max_length=20)),
                ('unique_key', models.CharField(blank=True, help_text='Unique key to identify this record uniquely. Indentifier code or DOI etc', max_length=500, null=True)),
                ('received_on', models.DateTimeField(auto_now_add=True)),
                ('processed_on', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('success', 'success'), ('waiting', 'waiting'), ('processed', 'processed'), ('failed', 'failed')], help_text='Last access status', max_length=12)),
                ('provider', models.ForeignKey(help_text='Select provider', on_delete=django.db.models.deletion.CASCADE, related_name='archives', to='step1.providers')),
            ],
        ),
    ]
